{"ast":null,"code":"var _jsxFileName = \"/home/bonface/Development/MoringaPhase2( REACT )/Bot-Battlr/src/components/BotsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BotsPage() {\n  _s();\n\n  //start here with your code for step one\n  const baseBotURL = \" http://localhost:8002/bots\";\n  const [bots, setBots] = useState([]);\n  const [botsListed, setBotsListed] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(null);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [showSortBar, setShowSortBar] = useState(true); //Initially visible\n\n  const sortStrategy = useRef({\n    health: 1,\n    damage: 1,\n    armor: 1\n  }); //Fetch Bots\n\n  useEffect(() => {\n    fetch(`${baseBotURL}`).then(response => response.json()).then(data => {\n      setBots(data);\n      setFilteredBots(data);\n    });\n  }, []); //Check if a bot is already listed\n\n  function alreadyListedBot(bot) {\n    return Boolean(botsListed.find(botListed => botListed.id === bot.id));\n  } //Get bots of the same class\n\n\n  function getBotsOfSameClass(bot) {\n    return botsListed.find(botListed => botListed.bot_class === bot.bot_class);\n  } //Delete bot from server\n\n\n  function deleteBot(botToDelete) {\n    fetch(`${baseBotURL}/${botToDelete.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => response.json()).then(() => {\n      setBots(bots.filter(currentBot => currentBot.id !== botToDelete.id));\n      setBotsListed(botsListed.filter(botListed => botListed.id !== botToDelete.id));\n    });\n  } //Handler for Bot Actions\n\n\n  function handleBotActionClick(bot, action) {\n    // eslint-disable-next-line\n    switch (action) {\n      case \"release-bot\":\n        deleteBot(bot);\n        break;\n\n      case \"enlist-bot\":\n        const listedBotsOfSameClass = getBotsOfSameClass(bot);\n\n        if (!listedBotsOfSameClass) {\n          setBotsListed([...botsListed, bot]);\n          setFilteredBots(filteredBots.filter(currentBot => currentBot.id !== bot.id));\n        } else {\n          alert(`${listedBotsOfSameClass.name} has already been enlisted for the ${bot.bot_class} role`);\n        }\n\n        break;\n\n      case \"delist-bot\":\n        setBotsListed(botsListed.filter(currentBot => currentBot.id !== bot.id));\n        setFilteredBots([...filteredBots, bot]);\n        break;\n\n      case \"show-all-bots\":\n        setShowBotSpecs(null);\n        setShowSortBar(true);\n        break;\n\n      case \"show-bot-specs\":\n        setShowBotSpecs(bot);\n        setShowSortBar(false);\n    }\n  } //Sorting Functionality\n\n\n  function sortBots(data, sortBy) {\n    data.sort((a, b) => {\n      if (a[sortBy] > b[sortBy]) {\n        return sortStrategy.current[sortBy] * 1;\n      } else if (a[sortBy] < b[sortBy]) {\n        return sortStrategy.current[sortBy] * -1;\n      } else {\n        return 0;\n      }\n    });\n    return data;\n  }\n\n  function updateSortStrategy(sortBy) {\n    sortStrategy.current[sortBy] *= -1; //if it was ascending, make it descending and vice versa\n  }\n\n  function handleSortAction(sortBy) {\n    updateSortStrategy(sortBy);\n    setFilteredBots(sortBots([...filteredBots], sortBy));\n  }\n\n  function botsList(botsArray) {\n    return botsArray.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n      bot: bot,\n      handleBotActionClick: handleBotActionClick\n    }, bot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 33\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      botsListed: botsList(botsListed)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), showSortBar ? /*#__PURE__*/_jsxDEV(SortBar, {\n      handleSortAction: handleSortAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 72\n    }, this), showBotSpecs ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: showBotSpecs,\n      handleBotActionClick: handleBotActionClick,\n      alreadyListedBot: alreadyListedBot(showBotSpecs)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(BotCollection, {\n      filteredBots: botsList(filteredBots)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 151\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BotsPage, \"a1aSUc/446wQlPRQ//iq7l6Y4rA=\");\n\n_c = BotsPage;\nexport default BotsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","YourBotArmy","BotCollection","BotCard","BotSpecs","SortBar","BotsPage","baseBotURL","bots","setBots","botsListed","setBotsListed","showBotSpecs","setShowBotSpecs","filteredBots","setFilteredBots","showSortBar","setShowSortBar","sortStrategy","health","damage","armor","fetch","then","response","json","data","alreadyListedBot","bot","Boolean","find","botListed","id","getBotsOfSameClass","bot_class","deleteBot","botToDelete","method","headers","filter","currentBot","handleBotActionClick","action","listedBotsOfSameClass","alert","name","sortBots","sortBy","sort","a","b","current","updateSortStrategy","handleSortAction","botsList","botsArray","map"],"sources":["/home/bonface/Development/MoringaPhase2( REACT )/Bot-Battlr/src/components/BotsPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\n\n\nfunction BotsPage() {\n  //start here with your code for step one\n  const baseBotURL = \" http://localhost:8002/bots\";\n  const [bots, setBots] = useState([]);\n  const [botsListed, setBotsListed] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(null);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [showSortBar, setShowSortBar] = useState(true) //Initially visible\n  const sortStrategy = useRef({ health: 1, damage: 1, armor: 1 })\n\n  //Fetch Bots\n  useEffect(() => {\n    fetch(`${baseBotURL}`)\n      .then(response => response.json())\n      .then(data => {\n        setBots(data);\n        setFilteredBots(data);\n      });\n  }, [])\n\n  //Check if a bot is already listed\n  function alreadyListedBot(bot) {\n    return Boolean(botsListed.find(botListed => botListed.id === bot.id))\n  }\n\n  //Get bots of the same class\n  function getBotsOfSameClass(bot) {\n    return botsListed.find(botListed => botListed.bot_class === bot.bot_class)\n  }\n\n  //Delete bot from server\n  function deleteBot(botToDelete) {\n    fetch(`${baseBotURL}/${botToDelete.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    })\n      .then(response => response.json())\n      .then(() => {\n        setBots(bots.filter(currentBot => currentBot.id !== botToDelete.id))\n        setBotsListed(botsListed.filter(botListed => botListed.id !== botToDelete.id))\n      })\n  }\n\n  //Handler for Bot Actions\n  function handleBotActionClick(bot, action) {\n    // eslint-disable-next-line\n    switch (action) {\n      case \"release-bot\":\n        deleteBot(bot)\n        break;\n\n      case \"enlist-bot\":\n        const listedBotsOfSameClass = getBotsOfSameClass(bot);\n        if (!listedBotsOfSameClass) {\n          setBotsListed([...botsListed, bot])\n          setFilteredBots(filteredBots.filter(currentBot => currentBot.id !== bot.id))\n        } else {\n          alert(`${listedBotsOfSameClass.name} has already been enlisted for the ${bot.bot_class} role`)\n        }\n        break;\n\n      case \"delist-bot\":\n        setBotsListed(botsListed.filter(currentBot => currentBot.id !== bot.id))\n        setFilteredBots([...filteredBots, bot])\n        break;\n\n      case \"show-all-bots\":\n        setShowBotSpecs(null);\n        setShowSortBar(true)\n        break;\n\n      case \"show-bot-specs\":\n        setShowBotSpecs(bot);\n        setShowSortBar(false);\n    }\n  }\n\n  //Sorting Functionality\n  function sortBots(data, sortBy) {\n    data.sort((a, b) => {\n      if (a[sortBy] > b[sortBy]) {\n        return sortStrategy.current[sortBy] * 1\n      } else if (a[sortBy] < b[sortBy]) {\n        return sortStrategy.current[sortBy] * -1\n      } else {\n        return 0\n      }\n    })\n\n    return data\n  }\n\n\n  function updateSortStrategy(sortBy) {\n    sortStrategy.current[sortBy] *= -1 //if it was ascending, make it descending and vice versa\n  }\n\n\n  function handleSortAction(sortBy) {\n    updateSortStrategy(sortBy)\n    setFilteredBots(sortBots([...filteredBots], sortBy))\n  }\n\n  function botsList(botsArray) {\n    return botsArray.map(bot => <BotCard key={bot.id} bot={bot} handleBotActionClick={handleBotActionClick} />)\n  }\n\n  return (\n    <div>\n      <YourBotArmy botsListed={botsList(botsListed)} />\n      {showSortBar ? <SortBar handleSortAction={handleSortAction} /> : <div></div>}\n      {showBotSpecs ? <BotSpecs bot={showBotSpecs} handleBotActionClick={handleBotActionClick} alreadyListedBot={alreadyListedBot(showBotSpecs)} /> : <BotCollection filteredBots={botsList(filteredBots)} />}\n    </div>\n  )\n}\n\nexport default BotsPage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}